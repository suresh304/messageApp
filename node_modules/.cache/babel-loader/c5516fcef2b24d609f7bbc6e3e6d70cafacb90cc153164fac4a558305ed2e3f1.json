{"ast":null,"code":"import React from'react';import GoogleButton from'react-google-button';import{getAuth,signInWithPopup,GoogleAuthProvider}from\"firebase/auth\";import{auth}from'./firebase';import{jsx as _jsx}from\"react/jsx-runtime\";function SignIn(){var login=function login(){var provider=new GoogleAuthProvider();signInWithPopup(auth,provider).then(function(result){// This gives you a Google Access Token. You can use it to access the Google API.\nvar credential=GoogleAuthProvider.credentialFromResult(result);var token=credential.accessToken;// The signed-in user info.\nvar user=result.user;// IdP data available using getAdditionalUserInfo(result)\n// ...\n}).catch(function(error){// Handle Errors here.\nvar errorCode=error.code;var errorMessage=error.message;// The email of the user's account used.\nvar email=error.customData.email;// The AuthCredential type that was used.\nvar credential=GoogleAuthProvider.credentialFromError(error);// ...\n});};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(GoogleButton,{onClick:login})});}export default SignIn;","map":{"version":3,"names":["React","GoogleButton","getAuth","signInWithPopup","GoogleAuthProvider","auth","jsx","_jsx","SignIn","login","provider","then","result","credential","credentialFromResult","token","accessToken","user","catch","error","errorCode","code","errorMessage","message","email","customData","credentialFromError","children","onClick"],"sources":["/home/allisuresh/suresh304.github.io/src/SignIn.js"],"sourcesContent":["import React from 'react'\nimport GoogleButton from 'react-google-button'\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { auth } from './firebase';\n\n\nfunction SignIn() {\n    const login=()=>{\n\n\nconst provider= new GoogleAuthProvider()\nsignInWithPopup(auth, provider)\n  .then((result) => {\n    // This gives you a Google Access Token. You can use it to access the Google API.\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const token = credential.accessToken;\n    // The signed-in user info.\n    const user = result.user;\n    // IdP data available using getAdditionalUserInfo(result)\n    // ...\n  }).catch((error) => {\n    // Handle Errors here.\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    // The email of the user's account used.\n    const email = error.customData.email;\n    // The AuthCredential type that was used.\n    const credential = GoogleAuthProvider.credentialFromError(error);\n    // ...\n  });\n\n    }\n  return (\n    <div>\n        <GoogleButton onClick={login}/>\n    </div>\n  )\n}\n\nexport default SignIn"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,YAAY,KAAM,qBAAqB,CAC9C,OAASC,OAAO,CAAEC,eAAe,CAAEC,kBAAkB,KAAQ,eAAe,CAC5E,OAASC,IAAI,KAAQ,YAAY,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAGlC,QAAS,CAAAC,MAAMA,CAAA,CAAG,CACd,GAAM,CAAAC,KAAK,CAAC,QAAN,CAAAA,KAAKA,CAAA,CAAK,CAGpB,GAAM,CAAAC,QAAQ,CAAE,GAAI,CAAAN,kBAAkB,EAAE,CACxCD,eAAe,CAACE,IAAI,CAAEK,QAAQ,CAAC,CAC5BC,IAAI,CAAC,SAACC,MAAM,CAAK,CAChB;AACA,GAAM,CAAAC,UAAU,CAAGT,kBAAkB,CAACU,oBAAoB,CAACF,MAAM,CAAC,CAClE,GAAM,CAAAG,KAAK,CAAGF,UAAU,CAACG,WAAW,CACpC;AACA,GAAM,CAAAC,IAAI,CAAGL,MAAM,CAACK,IAAI,CACxB;AACA;AACF,CAAC,CAAC,CAACC,KAAK,CAAC,SAACC,KAAK,CAAK,CAClB;AACA,GAAM,CAAAC,SAAS,CAAGD,KAAK,CAACE,IAAI,CAC5B,GAAM,CAAAC,YAAY,CAAGH,KAAK,CAACI,OAAO,CAClC;AACA,GAAM,CAAAC,KAAK,CAAGL,KAAK,CAACM,UAAU,CAACD,KAAK,CACpC;AACA,GAAM,CAAAX,UAAU,CAAGT,kBAAkB,CAACsB,mBAAmB,CAACP,KAAK,CAAC,CAChE;AACF,CAAC,CAAC,CAEA,CAAC,CACH,mBACEZ,IAAA,QAAAoB,QAAA,cACIpB,IAAA,CAACN,YAAY,EAAC2B,OAAO,CAAEnB,KAAM,EAAE,EAC7B,CAEV,CAEA,cAAe,CAAAD,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}